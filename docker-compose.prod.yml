version: '3.8'

services:
  database:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-redbus_db}
      POSTGRES_USER: ${POSTGRES_USER:-redbus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Combined backend + frontend service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redbus_app_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-redbus_user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-redbus_db}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - redbus_network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/cities"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: redbus_nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - redbus_network
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
